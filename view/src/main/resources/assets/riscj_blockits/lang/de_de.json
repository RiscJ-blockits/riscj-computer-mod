{
  "block.riscj_blockits.bus_block": "Bus",
  "block.riscj_blockits.register_block": "Register",
  "block.riscj_blockits.alu_block": "Rechenwerk",
  "block.riscj_blockits.memory_block": "Hauptspeicher",
  "block.riscj_blockits.control_unit_block": "Kontrolleinheit",
  "block.riscj_blockits.system_clock_block": "Taktgeber",
  "block.riscj_blockits.programming_block": "Programmier Block",

  "item.riscj_blockits.goggles": "Ingenieur Brille",
  "item.riscj_blockits.instruction_set_mima": "MIMA Befehlssatz",
  "item.riscj_blockits.instruction_set_mima_io": "MIMA Befehlssatz (I/O)",
  "item.riscj_blockits.instruction_set_riscv": "RISC-V Befehlssatz",
  "item.riscj_blockits.manual": "Computer Betriebsanleitung",
  "item.riscj_blockits.program": "Programm Code",

  "block.riscj_blockits.redstone_input_block": "Redstone Eingang",
  "block.riscj_blockits.redstone_output_block": "Redstone Ausgang",
  "block.riscj_blockits.wireless_register_block": "Quanten Verschränktes Register",

  "itemGroup.riscj_blockits.computer_components": "Computer Gegenstände",

  "manual.title": "Handbuch",
  "istItem.title": "Befehlssatz",
  "ist_error": "Fehler beim Laden des Befehlssatzes",

  "programming_pretext": "hier könnte dein Code stehen",
  "block.riscj_blockits.text_output_block": "Konsole",
  "riscj_blockits.clockmode": "Modus",
  "riscj_blockits.clockspeed": "Geschwindigkeit",
  "riscj_blockits.register_type": "Typ",
  "riscj_blockits.register_value": "Wert",
  "riscj_blockits.alu_operation": "Operation",
  "riscj_blockits.program": "Programm",
  "riscj_blockits.program_none": "Keins geladen",
  "riscj_blockits.computer_complete": "Funktional",
  "riscj_blockits.computer_incomplete": "Nicht fertig",
  "riscj_blockits.ist_none": "Keins",
  "riscj_blockits.ist": "Befehlssatz",
  "riscj_blockits.completion": "Fertigstellung",
  "riscj_blockits.no_bus_data": "keine Daten",
  "block.riscj_blockits.bus_data": "Daten",
  "manual.introduction": "Einleitung",
  "manual.introduction.text": "Diese Mod wurde entwickelt, um ein praktisches Verständnis der Computerarchitektur zu vermitteln. Sie ermöglicht es Ihnen, einen virtuellen Computer im Minecraft-Universum zu konstruieren, indem Sie bestimmte Blöcke verwenden, die verschiedene Komponenten eines Computersystems darstellen. Zu diesen Komponenten gehören Register, eine Steuereinheit, eine arithmetische Logikeinheit (ALU) und ein Speicher. \n Indem Sie diese Blöcke an denselben Bus anschließen, können Sie eine voll funktionsfähige Computersimulation erstellen. Dieser Aufbau spiegelt die vereinfachte Struktur eines echten Computers wider, bei dem die verschiedenen Komponenten über ein gemeinsames Bussystem miteinander kommunizieren und interagieren.\n\n Programmierung und Ausführung\n Sobald Ihr Computer aufgebaut ist, können Sie ihn mit einem im Programmierblock zusammengestellten Programm zum Leben erwecken. Diese Funktion führt in das Konzept der Assemblersprache ein und zeigt, wie Anweisungen in einem Computersystem ausgeführt werden.\n Du kannst Programme schreiben, sie in deinen Computer laden und beobachten, wie deine Anweisungen in der Minecraft-Welt ausgeführt werden. Diese interaktive Erfahrung vermittelt ein greifbares Verständnis dafür, wie Software und Hardware in einem Computersystem zusammenwirken.\n\n Lernen und Spaß\n Egal, ob du ein Informatikstudent bist, der nach einer unterhaltsamen Ergänzung zu seinem Studium sucht, ein Lehrer, der ein ansprechendes Lehrmittel sucht, oder ein Minecraft-Enthusiast, der sich für Computer interessiert, diese Mod bietet eine einzigartige Mischung aus Lernen und Spielen.\n\n Wir hoffen, dass diese Mod deine Neugierde weckt und dein Verständnis für Computersysteme vertieft. Viel Spaß beim Bauen, Programmieren und Erforschen der Welt der Computerarchitektur in Minecraft!\n\n In den folgenden Abschnitten dieser Anleitung findest du detaillierte Anweisungen, wie du die einzelnen Komponenten verwendest und deinen Computer zusammenbaust. Viel Spaß beim Basteln!",
  "manual.programming": "Programmierung",
  "manual.programming.text": "Programmieren Ihres virtuellen Computers in Minecraft\nWillkommen zum Abschnitt Programmierung, in dem Sie lernen, wie Sie Ihrer MIMA/RISCV-Computersimulation Leben einhauchen können, indem Sie Programme in Minecraft schreiben und ausführen.\n\n Programmieren in Minecraft verstehen \n In unserer Mod ist Programmierung der Prozess der Erstellung einer Abfolge von Anweisungen, die Ihr virtueller Computer ausführen wird. Diese Anweisungen sind in Assemblersprache geschrieben und stellen eine vereinfachte Darstellung des Maschinencodes dar. Über den Programmierblock können Sie Ihren Code eingeben und die dynamische Ausführung Ihres Programms in der Minecraft-Welt beobachten.\n\nProgramme schreiben\n Um ein Programm zu schreiben, interagieren Sie mit der Benutzeroberfläche des Programmierblocks. Hier kannst du Assembler-Code eingeben, der die Schritte definiert, die dein virtueller Computer ausführen wird. Berücksichtigen Sie bei der Erstellung Ihrer Programme die in der Steuereinheit gewählte Befehlssatzarchitektur, da diese die für die Programmierung verfügbaren Befehle beeinflusst.\n\nProgrammausführung\nWenn Sie Ihr Programm geschrieben haben, laden Sie es über den Programmierblock in den Computer. Die Steuereinheit interpretiert die Anweisungen, und der Bus erleichtert den Datenfluss zwischen den Komponenten, um die Ausführung des Programms zu gewährleisten. Erlebe, wie dein virtueller Computer zum Leben erwacht, indem er den programmierten Schritten folgt und so eine greifbare Verbindung zwischen deinem Code und der Minecraft-Welt herstellt.\n\nExperimentiere, iteriere und habe Spaß dabei, die Schnittstelle zwischen Programmierung und Spiel zu erforschen. Nutze das Programmieren, um das volle Potenzial deines virtuellen Computers in Minecraft auszuschöpfen!\n\nIn den folgenden Abschnitten dieses Handbuchs findest du ausführliche Anleitungen zum Schreiben von Programmen, zum Laden in den Computer und zur Fehlerbehebung bei allgemeinen Programmierproblemen.",
  "manual.instructionset": "Befehlssatz",
  "manual.instructionset.text": "The Instruction Set: Definieren von Computerbefehlen\nWillkommen zum Abschnitt über den Befehlssatz, in dem Sie etwas über die verschiedenen Befehlstypen erfahren, die für die Programmierung Ihres virtuellen Computers in Minecraft zur Verfügung stehen.\n\nVerstehen des Befehlssatzes\n In der Computerarchitektur ist der Befehlssatz eine Spezifikation einer Gruppe von Befehlen, die eine CPU verstehen und ausführen kann. Diese Befehle sind die Bausteine von Programmen, die es der CPU ermöglichen, Operationen wie Arithmetik, Logik, Datenübertragung und Kontrollfluss durchzuführen. In unserer Minecraft-Mod können Sie zwischen zwei Befehlssätzen wählen: MIMA und RISC-V. Sie können diese auch manipulieren und Ihren eigenen Befehlssatz definieren.\n\nMIMA-Befehlssatz\nDer MIMA-Befehlssatz basiert auf der Minimalmaschinenarchitektur, einem vereinfachten Modell eines Computersystems. Er umfasst unter anderem Befehle wie ADD, SUB, LDC, STV und JMP. Eine vollständige Liste der Befehle erhalten Sie, wenn Sie den Befehlssatz in den Programmierblock einfügen und auf das ?-Symbol klicken. Der MIMA-Befehlssatz bietet eine unkomplizierte Einführung in die Computerarchitektur und ist damit ein idealer Ausgangspunkt für das Erlernen der Programmierung und Ausführung in Minecraft.\n\nRISC-V-Befehlssatz\nDer RISC-V-Befehlssatz basiert auf der RISC-V-Architektur, einer offenen Standard-Befehlssatzarchitektur, die auf etablierten Prinzipien des Computerdesigns basiert. Er umfasst unter anderem Befehle wie ADD, SUB, AND, OR und JAL. Eine vollständige Liste aller Befehle erhalten Sie, wenn Sie den Befehlssatz in den Programmierblock einfügen und auf das ?-Symbol klicken. Der RISC-V-Befehlssatz bietet einen umfangreicheren Befehlssatz, der ein tieferes Verständnis der Computerarchitektur und der Programmierung in Minecraft vermittelt.\n\nAuswahl eines Befehlssatzes\nUm einen Befehlssatz für Ihren Computer auszuwählen, fügen Sie das Element in den Steuereinheitsblock ein. Experimentieren Sie mit verschiedenen Befehlssätzen, um zu verstehen, wie sie sich auf die Fähigkeiten Ihres virtuellen Computers auswirken.\n\nDefinieren Sie Ihren eigenen Befehlssatz\n Sie können auch Ihren eigenen Befehlssatz definieren, indem Sie die MIMA- oder RISC-V-Befehlssatz-Elemente ändern. Klicken Sie dazu mit der rechten Maustaste, während Sie das Element in der Hand halten. Diese Funktion ermöglicht es Ihnen, eigene Befehle zu erstellen und mit verschiedenen Programmierparadigmen in Minecraft zu experimentieren. Weitere Informationen zu dieser erweiterten Funktion findest du in der Readme-Datei zur Modifikation",
  "manual.controlunit": "Steuereinheit",
  "manual.controlunit.text": "Die Steuereinheit: Herzstück deines virtuellen Computers\n Willkommen bei der Steuereinheit, dem zentralen Knotenpunkt deiner MIMA/RISCV-Computersimulation in Minecraft. Hier legst du den Befehlssatz für deinen Computer fest und bestimmst, welche Komponenten für deinen Bau benötigt werden.\n\n Die Steuereinheit ist der Teil des Computers, der den Betrieb des Prozessors steuert. Sie steuert den Datenfluss zwischen der CPU und anderen Geräten. In unserer Minecraft-Mod hat der Steuereinheitsblock eine ähnliche Funktion. Hier stellen Sie die Befehlssatzarchitektur für Ihren Computer ein, z. B. MIMA oder RISC-V.\n\n Einstellen des Befehlssatzes\n Der Befehlssatz ist eine Gruppe von Befehlen, die die CPU verstehen und ausführen kann. Verschiedene Computertypen verwenden unterschiedliche Befehlssätze. In unserem Mod können Sie zwischen den Befehlssätzen MIMA und RISC-V wählen. Sobald Sie den Befehlssatz in der Steuereinheit eingestellt haben, ist Ihr virtueller Computer in der Lage, Befehle in diesem Format auszuführen.\n\n Erstellen eines vollständigen Computers\n Sobald Sie Ihren Befehlssatz eingestellt haben, hilft Ihnen die Steuereinheit dabei, herauszufinden, welche Teile für einen vollständigen Computer fehlen. Sie hilft Ihnen dabei, die notwendigen Blöcke wie Register, ALU und Speicher auf demselben Bus zu platzieren.\n\n Denken Sie daran, dass der Bau eines Computers nur der Anfang ist. Sobald dein System fertig ist, kannst du mit dem Programmieren beginnen und sehen, wie deine Anweisungen in der Minecraft-Welt zum Leben erwachen. Genieße die Reise der Erforschung und Entdeckung!\n\n Detaillierte Anweisungen zur Verwendung der anderen Komponenten findest du in den folgenden Abschnitten dieses Handbuchs.",
  "manual.register": "Register",
  "manual.register.text": "Der Registerblock: Speichern und Anzeigen von Daten\nWillkommen zum Registerblock, einer wichtigen Komponente Ihrer MIMA/RISCV-Computersimulation in Minecraft. Hier stellen Sie den Registertyp ein und zeigen den gespeicherten Wert an. In der Computerarchitektur ist ein Register ein kleiner Speicherbereich, der als Teil einer CPU oder eines anderen digitalen Prozessors verfügbar ist. Diese Register werden verwendet, um Daten und Befehle, die sofort von der CPU verwendet werden, schnell zu akzeptieren, zu speichern und zu übertragen. In unserer Minecraft-Mod hat der Registerblock eine ähnliche Funktion.\n\nEinstellen des Registertyps\nDer Registerblock ermöglicht es Ihnen, den Registertyp einzustellen. Zu den verschiedenen Registertypen gehören u. a. der Akkumulator, der Programmzähler, das Befehlsregister, das Speicheradressregister und die Mehrzweckregister. Jeder Registertyp hat eine bestimmte Rolle in der Funktionsweise eines Computers. Die verfügbaren Registertypen werden durch den Befehlssatz definiert, der in der Steuereinheit auf demselben Bus wie das Register eingefügt ist. Um den Registertyp einzustellen, öffnen Sie die GUI und klicken Sie auf das Buchsymbol. Klicken Sie dort auf einen Registertyp mit einem roten X, um ihn auszuwählen und erneut, um die Auswahl aufzuheben.\n\n Anzeigen von Registerwerten\nNachdem Sie den Registertyp eingestellt haben, können Sie den im Register gespeicherten Wert anzeigen. Diese Funktion bietet einen Echtzeit-Einblick in die Funktionsweise Ihres virtuellen Computers. Während Sie Programme ausführen, können Sie sehen, wie sich die Daten durch Ihr System bewegen und wie die verschiedenen Komponenten zusammenwirken.",
  "manual.alu": "Rechenwerk (ALU)",
  "manual.alu.text": "Die arithmetische Logikeinheit (ALU): Der Antrieb für Berechnungen\nWillkommen bei der ALU, einer wichtigen Komponente Ihrer MIMA/RISCV-Computersimulation in Minecraft. Die ALU ist für die Durchführung von arithmetischen und logischen Operationen verantwortlich, was sie zum Kraftwerk deines virtuellen Computers macht.\n\nDie ALU verstehen\n In der Computerarchitektur ist die ALU ein Schlüsselelement der CPU, das arithmetische und logische Operationen mit Daten ausführt. In unserem Minecraft-Mod emuliert der ALU-Block diese Funktionalität. Er führt Operationen wie Addition, Subtraktion, UND, ODER und mehr aus und ermöglicht es deinem virtuellen Computer, Daten zu verarbeiten und zu manipulieren.\n\nIntegration mit anderen Komponenten\nDie ALU arbeitet mit den ALU-Registern, sammelt Eingangswerte von zwei Eingangsregistern und schreibt das Ergebnis in ein Ausgangsregister. Die ALU-Register müssen neben dem ALU-Block platziert werden.",
  "manual.bus": "Bus",
  "manual.bus.text": "Der Bus: Ermöglichung der Kommunikation zwischen Komponenten\nWillkommen zum Bus, dem Kommunikationsrückgrat Ihrer MIMA/RISCV-Computersimulation in Minecraft. Der Bus verwaltet den Datentransfer zwischen den verschiedenen Komponenten deines virtuellen Computers und ermöglicht es ihnen, zusammenzuarbeiten.\n\nDen Bus verstehen\n In der Computerarchitektur ist ein Bus ein Kommunikationssystem, das Daten zwischen Komponenten überträgt. In ähnlicher Weise dient der Busblock in unserer Minecraft-Mod als Medium, über das Register, die Steuereinheit, die ALU und der Speicher Informationen austauschen. Alle Komponenten am selben Bus zu platzieren ist entscheidend für das ordnungsgemäße Funktionieren Ihres virtuellen Computers.\n\nVerbinden von Komponenten\nUm Komponenten mit dem Bus zu verbinden, platzieren Sie sie einfach neben dem Bus. Dadurch wird eine Kommunikationsverbindung hergestellt, die die Datenübertragung ermöglicht.",
  "manual.memory": "Hauptspeicher",
  "manual.memory.text": "Der Speicherblock: Speichern und Abrufen von Daten\nWillkommen zum Speicherblock, einer wesentlichen Komponente Ihrer MIMA/RISCV-Computersimulation in Minecraft. Der Speicherblock ermöglicht es Ihrem virtuellen Computer, Daten zu speichern und abzurufen, und ist damit ein entscheidendes Element für die Programmausführung.\n\nDen Speicher verstehen\nIn Computersystemen wird der Speicher zum Speichern von Daten und Anweisungen verwendet. Der Speicherblock in unserem Minecraft-Mod emuliert diese Funktionalität und bietet einen Raum, in dem Ihr virtueller Computer Informationen speichern und während der Programmausführung abrufen kann.\n\nEin Programm in den Speicher schreiben\nUm ein Programm in den Speicher Ihres Computers zu schreiben, fügen Sie ein Programmelement, auf dem Sie ein Programm geschrieben haben, in den Speicherblock ein. Dadurch wird das Programm im Speicher gespeichert und steht dem Steuergerät zur Ausführung zur Verfügung.\n\nIn den Speicher schauen\nUm den Inhalt des Speichers einzusehen, öffnen Sie die Benutzeroberfläche des Speicherblocks. Dadurch werden die gespeicherten Daten angezeigt und Sie erhalten einen Echtzeit-Einblick in die Funktionsweise Ihres virtuellen Computers.",
  "manual.systemclock": "Taktgeber",
  "manual.systemclock.text": "Die Systemuhr: Synchronisierung von Computeroperationen\nWillkommen bei der Systemuhr, einer wichtigen Komponente Ihrer MIMA/RISCV-Computersimulation in Minecraft. Die Systemuhr ermöglicht die Ausführung der Operationen Ihres virtuellen Computers Tick für Tick.\n\nDie Systemuhr verstehen\nIn Computersystemen ist die Systemuhr ein Signal, das zur Synchronisierung des Betriebs verschiedener Komponenten verwendet wird. In unserem Minecraft-Mod emuliert der Systemuhrblock diese Funktion. Er liefert einen Impuls, der die Ausführung von Befehlen auslöst und dafür sorgt, dass die verschiedenen Komponenten deines virtuellen Computers reibungslos zusammenarbeiten.\n\nIntegration der Systemuhr\nUm die Systemuhr zu nutzen, musst du sie über ein gemeinsames Bussystem mit der Steuereinheit und den anderen Komponenten deines virtuellen Computers verbinden. Um den Schritt- und Schnellmodus der Systemuhr nutzen zu können, schließen Sie einen Auslöser für ein kurzes Redstone-Signal an die Systemuhr an, z. B. indem Sie einen Taster auf oder neben sie legen.\n\nEinstellen des Taktmodus und der Geschwindigkeit\nDie Systemuhr bietet drei Taktmodi - Schritt-, Tick- und Schnellmodus. \nUm den Schrittmodus einzustellen, stellen Sie die Nadel in der Systemuhr-GUI auf die äußerste linke Position. Im Schrittmodus müssen Sie jeden Tick manuell durch ein Redstone-Signal auslösen, z. B. über die Taste. \n Um die Systemuhr in den Schnellmodus zu versetzen, stellen Sie die Nadel in der Systemuhr-GUI in die äußerste rechte Position. Im Schnellmodus wird die Systemuhr jeden Tick automatisch so schnell wie möglich auslösen. Sie müssen den Schnellmodus durch ein Redstone-Signal starten, z. B. durch einmaliges Drücken der Taste. \nUm die Systemuhr in den Tick-Modus zu versetzen, verwenden Sie eine beliebige andere Nadelposition, je nach der von Ihnen gewünschten Geschwindigkeit. Im Tick-Modus wird die Systemuhr automatisch jeden Tick in Bezug auf den Tick des Minecraft-Spiels auslösen.",
  "manual.goggles": "Ingenieurbrille",
  "manual.goggles.text": "Die Ingenieursbrille: Visualisierung von Computerkomponenten\nWillkommen bei den Engineering Googles, einem mächtigen Werkzeug zur Visualisierung und Interaktion mit den Komponenten deiner MIMA/RISCV-Computersimulation in Minecraft. Die Ingenieursbrille ermöglicht es dir, den Typ des Blocks, den du betrachtest, und die Daten, die er enthält, zu sehen.\n\nVerwendung der Ingenieursbrille\nUm die Ingenieursbrille zu verwenden, setze sie einfach auf, indem du das Inventar öffnest und sie in den Helmschlitz ziehst, und betrachte die Blöcke in deinem virtuellen Computer. Die Brille zeigt den Typ jedes Blocks und die darin enthaltenen Daten an und liefert so eine visuelle Darstellung der Funktionsweise Ihres Computers. Diese Funktion ist besonders nützlich für die Fehlersuche und um zu verstehen, wie die verschiedenen Komponenten zusammenwirken",
  "manual.redstoneinput": "Redstone Input und Output",
  "manual.redstoneinput.text": "Die Redstone Input- und Output-Blöcke: Interfacing mit der Minecraft Welt\nWillkommen bei den Redstone Input- und Output-Blöcken, die es Ihrer MIMA/RISCV Computersimulation ermöglichen, mit der Minecraft Welt zu interagieren. Mit diesen Blöcken können Sie Redstone-Signale ein- und ausgeben und so eine Brücke zwischen Ihrem virtuellen Computer und der Minecraft-Umgebung schlagen.\n\nDie Redstone-Eingabe und -Ausgabe verstehen\nIn Minecraft ist Redstone ein Material, das Energie und Signale übertragen kann. Die Redstone-Eingabe- und -Ausgabeblöcke in unserer Mod ermöglichen es deinem virtuellen Computer, mit der Minecraft-Welt zu interagieren, indem er Redstone-Signale sendet und empfängt.\n\nEingabe und Ausgabe von Signalen\nUm ein Redstone-Signal einzugeben, verbinde einen Redstone-Eingabeblock mit einem Hebel, Knopf oder einer anderen Redstone-Quelle. Der Wert des Redstone-Signals, der zwischen 0 und 15 liegt, wird in das Redstone-Eingangsregister geschrieben und kann dann als Eingabe für Ihren virtuellen Computer verwendet werden, um dessen Betrieb zu beeinflussen. Um ein Redstone-Signal auszugeben, verbinden Sie einen Redstone-Ausgangsblock mit einem Redstone-Gerät wie einer Lampe, einer Tür oder einem Kolben. Ihr virtueller Computer kann diese Geräte steuern, indem er Redstone-Signale an sie sendet, indem er Werte zwischen 0 und 15 einstellt. Werte außerhalb dieses Bereichs setzen den Wert auf 15.",
  "manual.quantumstateregister": "Quantenverschränkung Register",
  "manual.quantumstateregister.text": "Das Quantenverschränkungsregister: Quantencomputing benutzen\nWillkommen zum Quantenzustandsregister, einer fortschrittlichen Komponente Ihrer MIMA/RISCV-Computersimulation in Minecraft. Der Quantenverschränkungsregister-Block ermöglicht es dir, ein Computerregister über eine beliebige Entfernung zu verschränken, wenn beide Blöcke von Minecraft geladen werden.\n\nVerbinden des Quantenverschränkungsregisters\nUm ein Quantenzustandsregister mit deinem Computer zu verbinden, verwende einen Quantenregister-Block für das Register in deinem Computer, das du verschränken möchtest. Halten Sie dann einen anderen Quantenverschränkungsblock in der Hand und klicken Sie mit der rechten Maustaste auf das Quantenverschränkungsregister in Ihrem Computer. Die Register sind nun verbunden und Sie können das Register von Ihrer Hand aus überall auf der Welt platzieren. Sie können die Registertypen unabhängig voneinander einstellen und beide Register in verschiedene Computer einbinden, um sie interagieren zu lassen",
  "manual.terminal": "Konsole",
  "manual.terminal.text": "Die Konsole: Anzeigen von Ausgaben und Empfangen von Eingaben für Ihren virtuellen Computer\nWillkommen zur Konsole, einer leistungsstarken Komponente Ihrer MIMA/RISCV-Computersimulation in Minecraft. Mit der Konsole können Sie die Ausgaben Ihres virtuellen Computers anzeigen und ASCII-Text eingeben. In Computersystemen ist ein Terminal ein Gerät, das es Benutzern ermöglicht, mit einem Computer zu interagieren und dessen Ausgaben anzuzeigen. In unserer Minecraft-Mod emuliert die Konsole diese Funktionalität. Er zeigt die Ausgaben des virtuellen Computers an und ermöglicht die Eingabe von ASCII-Text. Um den Terminalblock zu verwenden, schließen Sie ihn wie jedes andere Register an den Bus Ihres virtuellen Computers an und stellen Sie seinen Ausgabetyp ein. Wenn Sie Programme ausführen und in das Register schreiben, zeigt das Terminal die Ausgabe an und hängt sie an das Ende der aktuellen Anzeigezeichenfolge an.\n\nEingabe in den Computer\n Wenn Sie eine Eingabe in das Terminal eingeben und auf Enter klicken, wird der ASCII-Text in einen Puffer geschrieben. Wenn Sie dann eine Eins in das Modusregister schreiben, wird das erste Zeichen Ihrer Eingabe in das Eingaberegister geschrieben. Jedes Mal, wenn Sie nun eine Eins in das Modusregister schreiben, wird das nächste Zeichen in das Eingaberegister geschrieben. ",
  "manual.instruction_set": "Anpassen des Befehlssatzes",
  "manual.instruction_set.text": "Sie können auch Ihren eigenen Befehlssatz definieren, indem Sie die MIMA- oder RISC-V-Befehlssatz-Elemente ändern. Klicken Sie dazu mit der rechten Maustaste, während Sie das Element in Ihrer Hand halten. Diese Funktion ermöglicht es dir, eigene Befehle zu erstellen und mit verschiedenen Programmierparadigmen in Minecraft zu experimentieren.\nUm deinen eigenen Befehlssatz zu schreiben, halte dich bitte an die folgenden Richtlinien:\n\n- Jeder Befehl sollte einen eindeutigen Namen haben.\n- Die . json Struktur sollte die Abschnitte name, instruction_length, registers, memory, alu_operations, fetch, address_change, program_start_label, data_storage_keywords und instructions enthalten.\n- Der Abschnitt instruction_length sollte die Länge der Anweisung in Bits angeben.\n- Der Abschnitt registers sollte die Unterabschnitte program_counter, alu, float, integer und initial_values enthalten. \n- Der Abschnitt memory sollte die Unterabschnitte word_length, address_length, access_delay, byte_order, possible_opcode_lengths und opcode_position enthalten.\n- Der Abschnitt alu_operations sollte eine Liste der verfügbaren ALU-Operationen enthalten.\n- Der Abschnitt fetch sollte eine Liste der Fetch-Befehle enthalten.\n- Der Abschnitt address_change sollte eine Liste der Adressänderungsbefehls-Regexe enthalten. \n- Der Abschnitt program_start_label sollte die Bezeichnung des Programmstarts enthalten.\n- Der Abschnitt data_storage_keywords sollte eine Liste von Schlüsselwort-Regexes für die Datenspeicherung enthalten.\n- Die Werte dieser Regexes sollten `[your-group-name] <Wert-Länge-in-Bytes>' enthalten, um anzugeben, in was der Wert geparst werden soll. Ein Plus kann am Ende hinzugefügt werden, um anzuzeigen, dass der Regex-Wert als ASCII-Zeichen betrachtet und daher wiederholt werden soll.\n- Der Abschnitt Anweisungen sollte eine Liste der verfügbaren Anweisungen enthalten, jede mit einem eindeutigen Namen und den Unterabschnitten Argumente, Opcode, Ausführung und Übersetzung.\n- Der Unterabschnitt Argumente sollte eine Liste der Argumente für die Anweisung enthalten. \n- Der Unterabschnitt opcode sollte den Opcode für die Anweisung enthalten.\n- Der Unterabschnitt execution sollte eine Liste der Ausführungsbefehle für die Anweisung enthalten.\n- Der Unterabschnitt translation sollte das Schema für die Binärübersetzung der Anweisung enthalten.\n- Ein ausführliches Beispiel finden Sie in dem nachstehenden Beispielbefehlssatz. \n\nDie so genannten Mikrobefehle, die im Ausführungsteil der Befehle und in der Abrufphase verwendet werden, sind wie folgt definiert (\"[]\" gibt an, dass in dieses Feld ein Argument einzufügen ist, \"&[]\" gibt an, dass das Argument als Register zu behandeln ist, \"&f[]\" bedeutet ein Float-Register, und \"<mem_vis>\" bedeutet, dass dies nur zur Visualisierung des Speicherzugriffs dient und keine Datenbewegung ausführt):\n- Datenübertragung: `json [\"[destination]\", \"[origin]\", \"[memory_flag]\", Storage-Operation] `\n- ALU Operation: `json [\"[operation]\", \"[alu-dest]\", \"[alu-origin 1]\", \"[alu-origin 2]\", \"[memory flag]\", Storage-Operation] `\n- Bedingte Operation: `json [\"IF\", \"[comparator1]\", \"[comparator2]\", \"[comparing_operation]\", \"[destination]\", \"[origin]\", \"[memory_flag]\", Storage-Operation] `\n- Storage Operation: `json [\"[destination]\", \"[origin]\"] Sobald Sie Ihren Befehlssatz definiert haben, fügen Sie das Element in den Steuereinheitsblock ein, um die Änderungen auf Ihren virtuellen Computer anzuwenden. Experimentieren Sie mit verschiedenen Befehlssätzen, um zu verstehen, wie sie sich auf die Fähigkeiten Ihres virtuellen Computers auswirken."
}