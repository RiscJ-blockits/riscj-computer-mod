{
  "name": "MIMA",             // declare name
  "instruction_length": 24,   // declare instruction length

  "registers": {                  // define existing (required) registers
    "program_counter": "IAR",   // register containing the current program address
    "alu": [                    // alu specific registers
      "X",
      "Y",
      "Z"
    ],
    "float": {},            // float registers
    "integer": {            // integer registers
      "IR": 1,
      "EINS": 2,
      "AKKU": 3,
      "SAR": 4,
      "SDR": 5,
      "in": 6,
      "out": 7,
      "mode": 8
    }
  },
  "memory": {
    "word_length": 24,
    "address_length": 20,
    "access_delay": 3,
    "byte_order": "le",
    "possible_opcode_lengths": [4, 8],
    "opcode_position": "MOST"
  },
  "alu_operations": [
    "None",
    "ADD",
    "RR",
    "AND",
    "OR",
    "XOR",
    "NEG",
    "JMN"
  ],
  "fetch": [
    ["SAR", "IAR", "r", "<mem_vis>", "SAR"],
    ["X", "IAR", "r" ,"" ,""],
    ["Y", "EINS", "r", "", ""],
    ["ADD", "Z", "X", "Y" ,"", "", ""],
    ["IAR", "Z", "r", "SDR", "Mem[SAR]"],
    ["IR", "SDR", "", "", ""]
  ],
  "address_change": {
    " *\\* *=  *(?<address>\\w+) *": "[address]"
  },
  "program_start_label":
  "START",
  "data_storage_keywords": {
    " *DS * (?<value>(?:(?:0x)|(?:0b))?\\d+)": "[value]<24>"
  },
  "instructions": {
    "LDC": {                    // load constant
      "arguments": ["[const]"],
      "opcode": "0000",
      "execution": [
        ["AKKU", "[const]", "", "", ""]     // set AKKU to contents of constant
      ],
      "translation": [
        "0000",                     // op-code
        "[const]<20>"               // 20 bit constant
      ]
    },
    "ADD": {
      "arguments": ["[addr]"],
      "opcode": "0011",
      "execution": [
        ["SAR", "[addr]", "r", "<mem_addr>", "SAR"],
        // to     from memoryAction [to         from]
        ["X", "AKKU", "r", "", ""],
        ["", "", "r", "SDR", "<mem_data>"],
        ["Y", "SDR", "", "", ""],
        ["ADD", "Z", "X", "Y", "", "", ""],
        //alu-op to   x   y  memAction
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "0011",
        "[addr]<20>"
      ]
    },
    "LDV": {
      "arguments": ["[addr]"],
      "opcode": "0001",
      "execution": [
        ["SAR", "[addr]", "r", "<mem_addr>", "SAR"],
        ["", "", "r", "", ""] ,
        ["", "", "r", "SDR", "<mem_data>"],
        ["AKKU", "SDR", "", "", ""]
      ],
      "translation": [
        "0001",
        "[addr]<20>"
      ]
    },
    "STV": {
      "arguments": ["[addr]"],
      "opcode": "0010",
      "execution": [
        ["SAR", "[addr]", "w", "<mem_addr>", "SAR"],
        ["SDR", "AKKU", "w", "", ""],
        ["", "", "w", "<mem_data>", "SDR"]
      ],
      "translation": [
        "0010",
        "[addr]<20>"
      ]
    },
    "AND": {
      "arguments": ["[addr]"],
      "opcode": "0100",
      "execution": [
        ["SAR", "[addr]", "r", "<mem_addr>", "SAR"],
        ["X", "AKKU", "r", "", ""],
        ["", "", "r", "SDR", "<mem_data>"],
        ["Y", "SDR", "", "", ""],
        ["AND", "Z", "X", "Y", "", "", ""],
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "0100",
        "[addr]<20>"
      ]
    },
    "OR": {
      "arguments": ["[addr]"],
      "opcode": "0101",
      "execution": [
        ["SAR", "[addr]", "r", "<mem_addr>", "SAR"],
        ["X", "AKKU", "r", "" ,""],
        ["", "", "r", "SDR", "<mem_data>"],
        ["Y", "SDR", "", "", ""],
        ["OR", "Z", "X", "Y", "", "", ""],
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "0101",
        "[addr]<20>"
      ]
    },
    "XOR": {
      "arguments": ["[addr]"],
      "opcode": "0110",
      "execution": [
        ["SAR", "[addr]", "r", "<mem_addr>", "SAR"],
        ["X", "AKKU", "r", "", ""],
        ["", "", "r", "SDR", "<mem_data>"],
        ["Y", "SDR", "", "", ""],
        ["XOR", "Z", "X", "Y", "", "", ""],
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "0110",
        "[addr]<20>"
      ]
    },
    "HALT": {
      "arguments": [],
      "opcode": "11110000",
      "execution": [
        ["PAUSE", "", "", "", "", "", ""]
      ],
      "translation": [
        "11110000",
        "0000000000000000"
      ]
    },
    "NOT": {
      "arguments": [],
      "opcode": "11110001",
      "execution": [
        ["X", "AKKU", "", "", ""],
        ["NEG", "Z", "X", "", "", "", ""],
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "11110001",
        "0000000000000000"
      ]
    },
    "RAR": {
      "arguments": [],
      "opcode": "11110010",
      "execution": [
        ["X", "AKKU", "", "", ""],
        ["RR", "Z", "X", "", "", "", ""],
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "11110010",
        "0000000000000000"
      ]
    },
    "EQL": {
      "arguments": ["[addr]"],
      "opcode": "0111",
      "execution": [
        ["SAR", "[addr]", "r", "<mem_addr>", "SAR"],
        ["X", "AKKU", "r", "", ""],
        ["", "", "r", "SDR", "<mem_data>"],
        ["Y", "SDR", "", "", ""],
        ["EQ", "Z", "X", "Y", "" ,"", ""],
        ["AKKU", "Z", "", "", ""]
      ],
      "translation": [
        "0111",
        "[addr]<20>"
      ]
    },
    "JMP": {
      "arguments": ["[addr]"],
      "opcode": "1000",
      "execution": [
        ["IAR", "[addr]", "" , "", ""]
      ],
      "translation": [
        "1000",
        "[addr]<20>"
      ]
    },
    "JMN": {
      "arguments": ["[addr]"],
      "opcode": "1001",
      "execution": [
        ["X", "AKKU", "", "", ""],
        ["Y", "[addr]", "", "", ""],
        ["IF", "X", "0", "<", "PC", "[addr]", "", "", ""]
        //if  cond  then
      ],
      "translation": [
        "1001",
        "[addr]<20>"
      ]
    },
    "MVRA": {                    //move from register to akku
      "arguments": ["[addr]"],
      "opcode": "1100",
      "execution": [
        ["AKKU", "&[addr]", "", "", ""]
      ],
      "translation": [
        "1100",
        "[addr]<20>"
      ]
    },
    "MVAR": {                    //move from Akku to register
      "arguments": ["[addr]"],
      "opcode": "1010",
      "execution": [
        ["&[addr]", "AKKU", "", "", ""]
      ],
      "translation": [
        "1010",
        "[addr]<20>"
      ]
    }
  },
  "example_programm": "* = 0x10\nX: DS 4\nY: DS 3\nZ: DS 0\n\nONE: DS 1\n\n* = 0x20\nSTART: LDV Y\nNOT\nADD ONE\nSTV Y\n\nLOOP: LDV X\nADD Y\nJMN END\nSTV X\n\nLDV Z\nADD ONE\nSTV Z\n\nJMP LOOP\n\nEND: LDV Z\nHALT",
  "ai_api_key": ""
}