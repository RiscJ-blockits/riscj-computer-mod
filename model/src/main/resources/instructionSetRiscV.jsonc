{
// TODO update to Structure of mima

    "name": "RiscV",										//Name des Befehlssatzes
    "instruction_length": 32,								//Länge des Befehlswortes

    "registers": {
        "program_counter": "PC",
		"alu":["A", "B", "OUT"],							//Register der Architektur, die direkt an die ALU gebunden werden müssen
        "float": {
            //Register für Float-Operationen
            "ft0": 0,
            "ft1": 1,
            "ft2": 2,
            "ft3": 3,
            "ft4": 4,
            "ft5": 5,
            "ft6": 6,
            "ft7": 7,
            "fs0": 8,
            "fs1": 9,
            "fa0": 10,
            "fa1": 11,
            "fa2": 12,
            "fa3": 13,
            "fa4": 14,
            "fa5": 15,
            "fa6": 16,
            "fa7": 17,
            "fs2": 18,
            "fs3": 19,
            "fs4": 20,
            "fs5": 21,
            "fs6": 22,
            "fs7": 23,
            "fs8": 24,
            "fs9": 25,
            "fs10": 26,
            "fs11": 27,
            "ft8": 28,
            "ft9": 29,
            "ft10": 30,
            "ft11": 31
        },
        "integer": {										//Register für Integer-Operationen
            "zero": 0,
            "ra": 1,
            "sp": 2,
            "gp": 3,
            "tp": 4,
            "t0": 5,
            "t1": 6,
            "t2": 7,
            "s0": 8,
            "s1": 9,
            "a0": 10,
            "a1": 11,
            "a2": 12,
            "a3": 13,
            "a4": 14,
            "a5": 15,
            "a6": 16,
            "a7": 17,
            "s2": 18,
            "s3": 19,
            "s4": 20,
            "s5": 21,
            "s6": 22,
            "s7": 23,
            "s8": 24,
            "s9": 25,
            "s10": 26,
            "s11": 27,
            "t3": 28,
            "t4": 29,
            "t5": 30,
            "t6": 31
        }
    },
    "memory": {												//Speicher-Spezifikation
        "word_length": 32,									//Wortlänge im Speicher
        "address_length": 32,								//Länge der Speicheradresse
        "access_delay": 0,									//Verzögerung beim Speicherzugriff in Takten
		"byte_order": "be",									//Big-Endian oder Little-Endian
		"possible_opcode_lengths": [7],
		"opcode_position": "LEAST"
    },
    "alu_operations": [										//ALU-Operationen, die direkt angeboten werden
        "AND",
        "OR",
        "ADD",
        "SUB",
        "XOR",
        "SLL",
        "SRL",
        "SRA",
        "MUL",
        "MULH",										//Unsigned-Operationen sind nötig für die Unterscheidung
        "MULHSU",
        "MULHU",
        "DIV",
        "DIVU",
        "REM",
        "REMU"

    ],
    //TODO: Add fetch instruction
    "fetch": [
        //TODO
    ],
    "address_change": {
        " *.data *": "",                    // empty string means no change
        " *.text *": ""
    },
    "program_start_label":
            "main:",
    "data_storage_keywords": {
        " *.byte * (?<value>(?:(?:0x)|(?:0b))\\d+)": "[value]<8>",
        " *.halfword * (?<value>(?:(?:0x)|(?:0b))\\d+)": "[value]<16>",
        " *.word * (?<value>(?:(?:0x)|(?:0b))\\d+)": "[value]<32>"
        // TODO" *.string * (?<value>(?:(?:0x)|(?:0b))\\d+)": "[value]<8>"
    },

    "instructions": {
        "add": {	//Gibt das Format des Befehls in der Texteingabe an
            "arguments": ["[destaddr]", "[origaddr1]", "[origaddr2]"],

            "execution": [["A", "[origaddr1]", ""],		//Gibt je Subliste einen Abarbeitungsschritt für den Befehl an
                ["B", "[origaddr2]", ""],				//Standardformat für Datenbewegung -> [destination, origin, memory flag, storage operation]
                ["ADD", "OUT", "A", "B", ""],			//ALU-Operationen-Format -> [operation, alu-dest, alu-origin 1, alu-origin 2, memory flag]
                ["destaddr", "OUT", ""]
            ],
            "translation": [							//Übersetzung in Binärformat
                "0000000",
                "[origaddr2]<5>",						//Adressen oder Konstanten in [], <n> gibt Länge der Zahl an
                "[origaddr1]<5>",
                "000",
                "[destaddr]<5>",
                "0110011"
            ]
        },
        "addi": {
            "arguments": ["[t1]", "[t2]", "[const]"],
            "execution": [
                ["A", "[t2]", ""],
                ["B", "[const]", ""],
                ["ADD", "OUT", "A", "B", ""],
                ["t1", "OUT", ""]
            ],
            "translation": [
                "[const]<12>",
                "[t2]<5>",
                "000",
                "[t1]<5>",
                "0010011"
            ]
        },
        "and": {
            "arguments": ["[t1]", "[t2]", "[t3]"],
            "execution": [
                ["A", "[t2]", ""],
                ["B", "[t3]", ""],
                ["AND", "OUT", "A", "B", ""],
                ["t1", "OUT", ""]
            ],
            "translation": [
                "0000000",
                "[t3]<5>",
                "[t2]<5>",
                "111",
                "[t1]<5>",
                "0110011"
            ]
        },
        "andi": {
            "arguments": ["[t1]", "[t2]", "[const]"],
            "execution": [
                ["A", "[t2]", ""],
                ["B", "[const]", ""],
                ["AND", "OUT", "A", "B", ""],
                ["[t1]", "OUT", ""]
            ],
            "translation": [
                "[const]<12>",
                "[t2]<5>",
                "111",
                "[t1]<5>",
                "0010011"
            ]
        },
        "sll": {
            "arguments": ["[t1]", "[t2]", "[t3]"],
            "execution": [
                ["A", "[t2]", ""],
                ["B", "[t3]", ""],
                ["SLL", "OUT", "A", "B", ""],
                ["[t1]", "OUT", ""]
            ],
            "translation": [
                "0000000",
                "[t3]<5>",
                "[t2]<5>",
                "001",
                "[t1]<5>",
                "0110011"
            ]
        },
        "slli": {
            "arguments": ["[t1]", "[t2]", "[const]"],
            "execution": [
                ["A", "[t2]", ""],
                ["B", "[const]", ""],
                ["SLL", "OUT", "A", "B", ""],
                ["[t1]", "OUT", ""]
            ],
            "translation": [
                "0000000",
                "[const]<5>",
                "[t2]<5>",
                "001",
                "[t1]<5>",
                "0010011"
            ]
        },
        "sw": {
            "arguments": ["[t1]", "[const](t2)"],
            "execution": [
                ["A", "[t2]", ""],
                ["B", "[const]", ""],
                ["SLL", "OUT", "A", "B", ""],
                ["", "", "", ["MEM[t1]", "OUT"]]
            ],
            "translation": [
                "[const]<11:5>",						//Konstant in [], <n:m> gibt den Bereich aus der Gesamtzahl an (m<n)
                "[t2]<5>",
                "[t1]<5>",
                "010",
                "[const]<4:0>",
                "0100011"
            ]
        }
    }

}
